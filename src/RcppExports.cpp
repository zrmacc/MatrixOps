// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// MatCov
SEXP MatCov(const arma::mat A, const arma::mat B, const bool corMat);
RcppExport SEXP _MatrixOps_MatCov(SEXP ASEXP, SEXP BSEXP, SEXP corMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< const bool >::type corMat(corMatSEXP);
    rcpp_result_gen = Rcpp::wrap(MatCov(A, B, corMat));
    return rcpp_result_gen;
END_RCPP
}
// EigSym
SEXP EigSym(const arma::mat A);
RcppExport SEXP _MatrixOps_EigSym(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(EigSym(A));
    return rcpp_result_gen;
END_RCPP
}
// FitOLS
SEXP FitOLS(const arma::colvec y, const arma::mat X);
RcppExport SEXP _MatrixOps_FitOLS(SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(FitOLS(y, X));
    return rcpp_result_gen;
END_RCPP
}
// FitWLS
SEXP FitWLS(const arma::vec y, const arma::mat X, const arma::vec w);
RcppExport SEXP _MatrixOps_FitWLS(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(FitWLS(y, X, w));
    return rcpp_result_gen;
END_RCPP
}
// Norm
SEXP Norm(const arma::vec x, const int p);
RcppExport SEXP _MatrixOps_Norm(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Norm(x, p));
    return rcpp_result_gen;
END_RCPP
}
// MatDet
SEXP MatDet(const arma::mat A, const bool logDet);
RcppExport SEXP _MatrixOps_MatDet(SEXP ASEXP, SEXP logDetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const bool >::type logDet(logDetSEXP);
    rcpp_result_gen = Rcpp::wrap(MatDet(A, logDet));
    return rcpp_result_gen;
END_RCPP
}
// MatInv
SEXP MatInv(const arma::mat A);
RcppExport SEXP _MatrixOps_MatInv(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(MatInv(A));
    return rcpp_result_gen;
END_RCPP
}
// MatIP
SEXP MatIP(const arma::mat A, const arma::mat B);
RcppExport SEXP _MatrixOps_MatIP(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(MatIP(A, B));
    return rcpp_result_gen;
END_RCPP
}
// MatProd
SEXP MatProd(const arma::mat A, const arma::mat B);
RcppExport SEXP _MatrixOps_MatProd(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(MatProd(A, B));
    return rcpp_result_gen;
END_RCPP
}
// MatOP
SEXP MatOP(const arma::mat A, const arma::mat B);
RcppExport SEXP _MatrixOps_MatOP(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(MatOP(A, B));
    return rcpp_result_gen;
END_RCPP
}
// MatQF
SEXP MatQF(const arma::mat X, const arma::mat A);
RcppExport SEXP _MatrixOps_MatQF(SEXP XSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(MatQF(X, A));
    return rcpp_result_gen;
END_RCPP
}
// SchurC
SEXP SchurC(const arma::mat Ibb, const arma::mat Iaa, const arma::mat Iba);
RcppExport SEXP _MatrixOps_SchurC(SEXP IbbSEXP, SEXP IaaSEXP, SEXP IbaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Ibb(IbbSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Iaa(IaaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Iba(IbaSEXP);
    rcpp_result_gen = Rcpp::wrap(SchurC(Ibb, Iaa, Iba));
    return rcpp_result_gen;
END_RCPP
}
// Tr
SEXP Tr(const arma::mat A);
RcppExport SEXP _MatrixOps_Tr(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Tr(A));
    return rcpp_result_gen;
END_RCPP
}
// LogSumExp
SEXP LogSumExp(const arma::vec x, const bool cum);
RcppExport SEXP _MatrixOps_LogSumExp(SEXP xSEXP, SEXP cumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type cum(cumSEXP);
    rcpp_result_gen = Rcpp::wrap(LogSumExp(x, cum));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MatrixOps_MatCov", (DL_FUNC) &_MatrixOps_MatCov, 3},
    {"_MatrixOps_EigSym", (DL_FUNC) &_MatrixOps_EigSym, 1},
    {"_MatrixOps_FitOLS", (DL_FUNC) &_MatrixOps_FitOLS, 2},
    {"_MatrixOps_FitWLS", (DL_FUNC) &_MatrixOps_FitWLS, 3},
    {"_MatrixOps_Norm", (DL_FUNC) &_MatrixOps_Norm, 2},
    {"_MatrixOps_MatDet", (DL_FUNC) &_MatrixOps_MatDet, 2},
    {"_MatrixOps_MatInv", (DL_FUNC) &_MatrixOps_MatInv, 1},
    {"_MatrixOps_MatIP", (DL_FUNC) &_MatrixOps_MatIP, 2},
    {"_MatrixOps_MatProd", (DL_FUNC) &_MatrixOps_MatProd, 2},
    {"_MatrixOps_MatOP", (DL_FUNC) &_MatrixOps_MatOP, 2},
    {"_MatrixOps_MatQF", (DL_FUNC) &_MatrixOps_MatQF, 2},
    {"_MatrixOps_SchurC", (DL_FUNC) &_MatrixOps_SchurC, 3},
    {"_MatrixOps_Tr", (DL_FUNC) &_MatrixOps_Tr, 1},
    {"_MatrixOps_LogSumExp", (DL_FUNC) &_MatrixOps_LogSumExp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_MatrixOps(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
